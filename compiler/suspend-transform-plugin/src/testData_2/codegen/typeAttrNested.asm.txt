public abstract interface Api : java/lang/Object {
    public abstract java.lang.Object run(kotlin.coroutines.Continuation p0)
}

public final class ApiExecutable$DefaultImpls : java/lang/Object {
    public static java.util.concurrent.CompletableFuture executeAsync(ApiExecutable $this, Api api)
}

final class ApiExecutable$executeAsync$1 : kotlin/coroutines/jvm/internal/SuspendLambda, kotlin/jvm/functions/Function1 {
    final Api $api

    int label

    final ApiExecutable this$0

    void <init>(ApiExecutable $receiver, Api $api, kotlin.coroutines.Continuation $completion)

    public final kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation $completion)

    public final java.lang.Object invoke(kotlin.coroutines.Continuation p1)

    public java.lang.Object invoke(java.lang.Object p1)

    public final java.lang.Object invokeSuspend(java.lang.Object $result)
}

public abstract interface ApiExecutable : java/lang/Object {
    public abstract java.lang.Object execute(Api p0, kotlin.coroutines.Continuation p1)

    public abstract java.util.concurrent.CompletableFuture executeAsync(Api p0)
}

public abstract interface ApiResult : java/lang/Object {

}
